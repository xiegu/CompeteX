com_tv <- subset(com, category == 'tv')%>%select(category, brand, p)%>%subset(brand%in%head(top_tv,10)$brand)
hot_sale_cat_key <- hot_sale_name_seg('category')
hot_sale_brand_key <- hot_sale_name_seg('brand')
sale_brand <- count(sale, category, brand)
search_table <- select(search, category, word, count)%>%
mutate(color_1 = ifelse(search$category == 'mobile', 'black', 'grey'))%>%
mutate(color_2 = ifelse(grepl('冰箱', word), '#d62d20', ifelse(grepl('空调', word), '#0057e7', ifelse(grepl('洗衣机', word), '#008744', ifelse(grepl('电视', word), '#ffa700', 'skyblue')))),
group =  ifelse(grepl('冰箱', word), '冰箱', ifelse(grepl('空调', word), '空调', ifelse(grepl('洗衣机', word), '洗衣机', ifelse(grepl('电视', word), '电视', '其他')))))
comment_summary <- function(){
res <- dbSendQuery(con, 'select count(1) as comments, count(distinct id) as ids from JD_item_comment;')
data <- dbFetch(res)
return(data)
}
comment_detail <- function(){
res <- dbSendQuery(con, 'select third_category, count(distinct id) as ids, count(1) as comments from JD_item_comment group by third_category;')
data <- dbFetch(res)
return(data)
}
score_full <- select(com, id, name, brand)%>%inner_join(score_full, by = c('id'='sku_id'))
# caclcuate 'best' item by weighted-average score
score_full <- mutate(score_full, score = round((good_count - poor_count)/(score2_count + score3_count + mean(score2_count + score3_count)),2)) %>% arrange(-score)
commentC <- filter(comment, third_category %in%c(878, 870,880, 798)) %>% left_join(select(detail, id, brand), by = c('id' = 'id')) %>% unique
rm(comment)
gc()
commentC <- mutate(commentC, category = ifelse(third_category == 878, 'ref', ifelse(third_category == 870, 'air', ifelse(third_category == 880, 'wash', 'tv'))))
# comment_ref_seg <- list()
# for(i in 1:length(comment_ref$content)){
#   if(comment_ref$content[i] %in% c('.', '~', '/////')){
#     next
#   }else{comment_ref_seg[[i]] <- wk[comment_ref$content[i]]
#   }
# }
good_score_index <- which(commentC$score == 5)
commentC_brand_good <- commentC$brand[good_score_index]
tag_name <- attributes(tag_words$ref$pos$product)$names
commentC_ref_good <- commentC[good_score_index, ] %>% filter(category == 'ref')
match_list <- list()
for(i in tag_name){
cat(i, '\n')
match <- numeric()
#for(j in good_score_index){ #length(comment_ref_seg_good)
#match <- append(match, intersect(tag_words$ref$pos$product[i], comment_ref_seg_good[[j]]) %>% length)
pattern <- tag_words$ref$pos$product[i]%>%unlist %>% as.character %>% paste(collapse = '|')
match <- grepl(pattern, commentC_ref_good$content)
#match <- sapply(good_score_index, function(y) sapply(tag_words$ref$pos$product[i]%>%unlist, function(x) grepl(x, comment_ref$content[y]))%>%any%>%as.numeric%>%append(match))
#match <-
#match <- sapply(tag_words$ref$pos$product[i]%>%unlist, function(x) grepl(x, comment_ref$content[j]))%>%any%>%as.numeric%>%append(match)
#}
match_list[[i]] <- match
}
match_df <- do.call(cbind, match_list) %>% as.data.frame %>%mutate(brand = commentC_ref_good$brand) %>% group_by(brand) %>%
summarize(recognition = sum(recognition), style = sum(style), capacity = sum(capacity), noise = sum(noise), quality = sum(quality), energysaving = sum(energysaving), manupulation = sum(manupulation),
frostless = sum(frostless), radiating = sum(radiating), cooling = sum(cooling), freshness = sum(freshness)) %>% arrange(-recognition) %>% filter(!is.na(brand))
match_df
rm(match_df)
rm(match_list)
match_ref_list <- list()
for(i in tag_name){
cat(i, '\n')
match <- numeric()
#for(j in good_score_index){ #length(comment_ref_seg_good)
#match <- append(match, intersect(tag_words$ref$pos$product[i], comment_ref_seg_good[[j]]) %>% length)
pattern <- tag_words$ref$pos$product[i]%>%unlist %>% as.character %>% paste(collapse = '|')
match <- grepl(pattern, commentC_ref_good$content)
#match <- sapply(good_score_index, function(y) sapply(tag_words$ref$pos$product[i]%>%unlist, function(x) grepl(x, comment_ref$content[y]))%>%any%>%as.numeric%>%append(match))
#match <-
#match <- sapply(tag_words$ref$pos$product[i]%>%unlist, function(x) grepl(x, comment_ref$content[j]))%>%any%>%as.numeric%>%append(match)
#}
match__ref_list[[i]] <- match
}
match_ref_list <- list()
for(i in tag_name){
cat(i, '\n')
match <- numeric()
#for(j in good_score_index){ #length(comment_ref_seg_good)
#match <- append(match, intersect(tag_words$ref$pos$product[i], comment_ref_seg_good[[j]]) %>% length)
pattern <- tag_words$ref$pos$product[i]%>%unlist %>% as.character %>% paste(collapse = '|')
match <- grepl(pattern, commentC_ref_good$content)
#match <- sapply(good_score_index, function(y) sapply(tag_words$ref$pos$product[i]%>%unlist, function(x) grepl(x, comment_ref$content[y]))%>%any%>%as.numeric%>%append(match))
#match <-
#match <- sapply(tag_words$ref$pos$product[i]%>%unlist, function(x) grepl(x, comment_ref$content[j]))%>%any%>%as.numeric%>%append(match)
#}
match_ref_list[[i]] <- match
}
match_ref_df <- do.call(cbind, match_ref_list) %>% as.data.frame %>%mutate(brand = commentC_ref_good$brand) %>% group_by(brand) %>%
summarize(recognition = sum(recognition), style = sum(style), capacity = sum(capacity), noise = sum(noise), quality = sum(quality), energysaving = sum(energysaving), manupulation = sum(manupulation),
frostless = sum(frostless), radiating = sum(radiating), cooling = sum(cooling), freshness = sum(freshness)) %>% arrange(-recognition) %>% filter(!is.na(brand))
match_ref_df
creat_hc <- function(t){
table <- filter(match_ref_df, brand == t)
table <- data.frame(name = names(table)[-1], y = as.numeric(table[1,-1])) %>% mutate(color = head(color_brand, 11))
table2 <- list_parse(table)
highchart() %>%
hc_title(text = t) %>%
hc_xAxis(categories = table$name, title = NULL) %>%
hc_yAxis(title = NULL) %>%
hc_add_series(data = table2, type = "bar", showInLegend = FALSE,
name = '占比') %>%
hc_tooltip(pointFormat= '{series.name}: <b>{point.y:.1f}%</b>')
}
brands <- head(match_df, 10)$brand %>%as.character
brands <- head(match_ref_df, 10)$brand %>%as.character
map(brands, creat_hc)%>% hw_grid(ncol = 2)
library(purrr)
map(brands, creat_hc)%>% hw_grid(ncol = 2)
library(highcharter)
map(brands, creat_hc)%>% hw_grid(ncol = 2)
？save.image()
?save.image
save.image(file = 'data.RData')
shiny::runApp('R_code/competeX')
runApp('R_code/competeX')
runApp('R_code/competeX')
ui <- dashboardPage(skin = 'red',
dashboardHeader(title = 'CompeteX'),
dashboardSidebar(
sidebarMenu(
br(),
menuItem('竞品全景', tabName = 'Competitor', icon = icon('th')),
menuItem('热卖商品分析', tabName = 'HotSales', icon = icon('th')),
menuItem('热门搜索词分析', tabName = 'HotSearch', icon = icon('th')),
menuItem('评论抓取监视', tabName = "CommentCrawl", icon = icon("dashboard")),
menuItem('用户偏好画像', tabName = 'CommentScore', icon = icon('th')),
menuItem('用户感知画像', tabName = 'CommentSentiment', icon = icon('th'))
)
),
dashboardBody(
tabItems(
tabItem(tabName = 'Competitor',
fluidRow(
column(
width = 2,
checkboxInput('Outlier', '是否包括价格极高/极低的商品？', value = TRUE)
)
),
fluidRow(
box(status = 'danger',
title = '冰箱最新价格全景',
width = 5,
highchartOutput('PriceRef', height = '400px')
),
box(status = 'success',
title = '冰箱最新在售商品数',
width = 3,
highchartOutput('TopRef', height = '400px')
),
box(status = 'primary',
title = '冰箱最新市场容量',
width = 4,
highchartOutput('SaleRef', height = '400px')
)
),
fluidRow(
box(status = 'danger',
title = '空调最新价格全景',
width = 5,
highchartOutput('PriceAir', height = '400px')
),
box(status = 'success',
title = '空调最新在售商品数',
width = 3,
highchartOutput('TopAir', height = '400px')
),
box(status = 'primary',
title = '空调最新市场容量',
width = 4,
highchartOutput('SaleAir', height = '400px')
)
),
fluidRow(
box(status = 'danger',
title ='洗衣机最新价格全景',
width = 5,
highchartOutput('PriceWash', height = '400px')
),
box(status = 'success',
title = '洗衣机最新在售商品数',
width = 3,
highchartOutput('TopWash', height = '400px')
),
box(status = 'primary',
title = '洗衣机最新市场容量',
width = 4,
highchartOutput('SaleWash', height = '400px')
)
),
fluidRow(
box(status = 'danger',
title = '电视最新价格全景',
width = 5,
highchartOutput('PriceTV', height = '400px')
),
box(status = 'success',
title = '电视最新在售商品数',
width = 3,
highchartOutput('TopTV', height = '400px')
),
box(status = 'primary',
title = '电视最新市场容量',
width = 4,
highchartOutput('SaleTV', height = '400px')
)
)
),
tabItem(tabName = "CommentCrawl",
fluidRow(
valueBox(
subtitle = 'No of comments',
value = textOutput('Comments'),
color = 'teal',
icon = icon('money')
),
valueBox(
subtitle = 'No of item ID',
value = textOutput('Ids'),
color = 'teal',
icon = icon('money')
)
),
fluidRow(
column(width =12,
dataTableOutput('Details')
)
)
),
tabItem(tabName = 'HotSales',
# fluidRow(
#   column(width = 2,
#          selectInput('HotCategory', label = '类别', choices = unique(sale$category))
#   ),
#   column(width = 2,
#          uiOutput('HotBrand')
#   )
# ),
fluidRow(
box(status = 'primary',
title = '各品牌热卖商品排行榜',
width = 6,
height = '700px',
fluidRow(
column(width = 2,
selectInput('HotCategory', label = '类别', choices = unique(sale$category))
),
column(width = 2,
uiOutput('HotBrand')
)
),
dataTableOutput('HotName', height = 'auto')
),
tabBox(
title = '热卖商品关键字',
side = 'right',
width = 6,
tabPanel('冰箱',
wordcloud2Output('RefWord', height = '400px')
),
tabPanel('空调',
wordcloud2Output('AirWord', height = '400px')
),
tabPanel('洗衣机',
wordcloud2Output('WashWord', height = '400px')
),
tabPanel('电视',
wordcloud2Output('TVWord', height = '400px')
)
)
),
fluidRow(
tabBox(title = NULL,
side = 'right',
width = 6,
tabPanel('最新热卖冰箱排行榜',
#p('')
dataTableOutput('SaleRefTop')
),
tabPanel(
title = '最新热卖冰箱品牌占比',
highchartOutput('SaleBrandRef')
)
),
tabBox(title = NULL,
side = 'right',
width = 6,
tabPanel('最新热卖空调排行榜',
#p('')
dataTableOutput('SaleAirTop')
),
tabPanel(
title = '最新热卖空调品牌占比',
highchartOutput('SaleBrandAir')
)
)
),
fluidRow(
tabBox(title = NULL,
side = 'right',
width = 6,
tabPanel('最新热卖洗衣机排行榜',
#p('')
dataTableOutput('SaleWashTop')
),
tabPanel(
title = '最新热卖洗衣机品牌占比',
highchartOutput('SaleBrandWash')
)
),
tabBox(title = NULL,
side = 'right',
width = 6,
tabPanel('最新热卖电视排行榜',
#p('')
dataTableOutput('SaleTVTop')
),
tabPanel(
title = '最新热卖电视品牌占比',
highchartOutput('SaleBrandTV')
)
)
)
),
tabItem(tabName = 'HotSearch',
fluidRow(
box(status = 'primary',
title = '热门搜索词分布',
width = 6,
highchartOutput('HotSearchBar', height = '800px')
),
box(status = 'primary',
title = '热门搜索词类占比',
width = 6,
highchartOutput('HotSearchPie', height = '600px'))
)
),
tabItem(tabName = 'CommentScore',
fluidRow(
box(status = 'info',
title = '冰箱最新客户品牌偏好度',
width = 4,
highchartOutput('ScoreRef', height = '600px')
),
tabBox(
title = NULL,
width = 8,
side = 'right',
height = 'auto',
tabPanel(
title = '冰箱各品牌商品得分',
fluidRow(
column(width = 2,
selectInput('RefBrandSelector', label = '品牌', choices = unique(filter(score_full, category == 'ref')$brand))
)
),
dataTableOutput('ScoreRefBrand', height = '400px')
),
tabPanel(
title = '冰箱商品用户偏好得分排行榜',
dataTableOutput('ScoreRefTop', height = '400px')
)
)
),
fluidRow(
box(status = 'info',
title = '空调最新客户品牌偏好度',
width = 4,
highchartOutput('ScoreAir', height = '600px')
),
tabBox(
title = NULL,
width = 8,
side = 'right',
tabPanel(
title = '空调各品牌商品得分',
fluidRow(
column(width = 2,
selectInput('AirBrandSelector', label = '品牌', choices = unique(filter(score_full, category == 'air')$brand))
)),
dataTableOutput('ScoreAirBrand', height = '400px')
),
tabPanel(
title = '空调商品用户偏好排行榜',
dataTableOutput('ScoreAirTop', height = '400px')
)
)
),
fluidRow(
box(status = 'info',
title = '洗衣机最新客户品牌偏好度',
width = 4,
highchartOutput('ScoreWash', height = '600px')
),
tabBox(
title = NULL,
side = 'right',
width = 8,
tabPanel(
title = '洗衣机各品牌商品得分',
fluidRow(
column(width = 2,
selectInput('WashBrandSelector', label = '品牌', choices = unique(filter(score_full, category == 'wash')$brand))
)
),
dataTableOutput('ScoreWashBrand', height = '400px')
),
tabPanel(
title = '洗衣机商品用户偏好排行榜',
dataTableOutput('ScoreWashTop', height = '400px')
)
)
),
fluidRow(
box(status = 'info',
title = '电视最新客户品牌偏好度',
width = 4,
highchartOutput('ScoreTV', height = '600px')
),
tabBox(
title = NULL,
side = 'right',
width = 8,
tabPanel(
title = '电视各品牌商品得分',
fluidRow(
column(width = 2,
selectInput('TVBrandSelector', label = '品牌', choices = unique(filter(score_full, category == 'tv')$brand))
)
),
dataTableOutput('ScoreTVBrand', height = '400px')
),
tabPanel(
title = '电视商品用户偏好排行榜',
dataTableOutput('ScoreTVTop', height = '400px')
)
)
)
),
tabItem(tabName = 'CommentSentiment',
fluidRow(
column(width = 2,
selectInput('CommentGoP', label = '客户感知度', choices = c('好评', '差评'))
),
column(width = 2,
selectInput('CommentCat'), label = '类别', choices = c('ref', 'air', 'wash', 'tv'))
),
fluidRow(
column(width = 12,
uiOutput('GoodCommentBrand')
)
))
)
)
)
selectInput('CommentGoP', label = '客户感知度', choices = c('好评', '差评'))
runApp('R_code/competeX')
runApp('R_code/competeX')
runApp('R_code/competeX')
?warnings
?box
runApp('R_code/competeX')
runApp('R_code/competeX')
?selectIn''
?selectInput
match_ref_good_list = match_ref_list
rm(match_ref_list)
match_ref_df_good = match_ref_df
rm(match_ref_df)
poor_score_index <- which(commentC$score %in% c(1,2))
commentC_brand_poor <- commentC$brand[poor_score_index]
rm(commentC_brand_good)
rm(commentC_brand_poor)
poor_score_index <- which(commentC$score %in% c(1,2))
commentC_ref_poor <- commentC[poor_score_index, ] %>% filter(category == 'ref')
commentC_ref_poor <- commentC[poor_score_index, ] %>% filter(category == 'ref')
length(poor_score_index)
nrow(commentC_ref_poor)
source('~/R_code/competeX/config.R')
match_ref_poor_list <- list()
for(i in tag_name){
match <- numeric()
pattern <- tag_words$ref$neg$product[i]%>%unlist %>% as.character %>% paste(collapse = '|')
match <- grepl(pattern, commentC_ref_poor$content)
match_ref_poor_list[[i]] <- match
}
match_ref_poor_list
i
match
tag_words$ref$neg$product[i]%>%unlist
tag_words$ref$neg$product
tag_words$ref$neg
source('~/R_code/competeX/config.R')
match_ref_poor_list <- list()
for(i in tag_name){
match <- numeric()
pattern <- tag_words$ref$neg$product[i]%>%unlist %>% as.character %>% paste(collapse = '|')
match <- grepl(pattern, commentC_ref_poor$content)
match_ref_poor_list[[i]] <- match
}
match
commentC_ref_poor$content[838]
match_ref_df_poor <- do.call(cbind, match_ref_poor_list) %>% as.data.frame %>%mutate(brand = commentC_ref_good$brand) %>% group_by(brand) %>%
summarize(recognition = sum(recognition), style = sum(style), capacity = sum(capacity), noise = sum(noise), quality = sum(quality), energysaving = sum(energysaving), manupulation = sum(manupulation),
frostless = sum(frostless), radiating = sum(radiating), cooling = sum(cooling), freshness = sum(freshness)) %>% arrange(-recognition) %>% filter(!is.na(brand))
match_ref_df_poor <- do.call(cbind, match_ref_poor_list) %>% as.data.frame %>%mutate(brand = commentC_ref_poor$brand) %>% group_by(brand) %>%
summarize(recognition = sum(recognition), style = sum(style), capacity = sum(capacity), noise = sum(noise), quality = sum(quality), energysaving = sum(energysaving), manupulation = sum(manupulation),
frostless = sum(frostless), radiating = sum(radiating), cooling = sum(cooling), freshness = sum(freshness)) %>% arrange(-recognition) %>% filter(!is.na(brand))
match_ref_df_poor
save.image(file = 'data.RData')
load('data.RData')
getwd()
setwd("~/R_code/competeX")
runApp()
runApp()
runApp()
